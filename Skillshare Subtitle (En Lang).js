// ==UserScript==
// @name:en-us   Skillshare Subtitle v1
// @name         Skillshare Subtitle
// @namespace    https://roox.site      //    https://github.com/amirroox
// @version      1
// @description:en-us  Download Subtitle (.srt) & Download Movie (.mp4)
// @description  Download Skillshare Subtitle as .srt file
// @author       Amir Roox
// @match        https://www.skillshare.com/classes/*
// @run-at       document-start
// @grant        unsafeWindow
// @license      MIT
// @supportURL   amirroox@yahoo.com
// ==/UserScript==

(function () {
  'use strict';

  // ==== The purpose of this paragraph is to save a request header, and then we can use it when we send our own requests ====
   // Some http requests, such as the one that gets video information https://edge.api.brightcove.com/playback/v1/accounts/3695997568001/videos/6173466475001
   // A request header is required, Accept: application/json;pk=BCpkADawqM2OOcM6njnM7hf9EaK6lIFlqiXB0iWjqGWUQjU7R8965xUvIQNqdQbnDTLz0IAO7E6Ir2rIbXJtFdzrGtitoee0n1XXRliD-RH9A-svuvNW9qgo3Bh34HEZqjXj
   // pk is the abbreviation of policy key (because Policy-Key-Raw is explicitly written in the response header)
   // Since this Accept: application/json;pk= cannot be obtained in the page at all (it should be generated by code), we can only use this interception method

  var request_header_accept = null
  XMLHttpRequest.prototype.real_setRequestHeader = XMLHttpRequest.prototype.setRequestHeader
  XMLHttpRequest.prototype.setRequestHeader = function (header, value) {
    if (header == 'Accept' && value.startsWith('application/json;pk=')) {
      request_header_accept = value; // If both conditions are true, save
      console.log(`found it!`);
      console.log(request_header_accept);
      
    }
    this.real_setRequestHeader(header, value);
  }
  // ==== The purpose of this section is to store the request header and we can use it after sending our requests ====


  // Initialization of variables
  var sessions = null; // Save an array of sessions (provided by Skillshare)
  var transcriptCuesArray = null; 
  var div = document.createElement('div');
  var button = document.createElement('button'); // button to download all subtitles
  var button2 = document.createElement('button'); // Button to download subtitles of current video
  var button3 = document.createElement('button'); // button to download the current video
  var button4 = document.createElement('button'); // button to download all videos
  var title_element = document.querySelector("div.class-details-header-title"); // title element

  function insertAfter(newNode, referenceNode) {
    referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);
  }

  // injection
  async function inject_our_script() {
    transcriptCuesArray = await get_transcriptCuesArray();
    var subtitle_ids = Object.keys(transcriptCuesArray); // ['3150718', '3150719', '3150720', ...]
    var subtitle_count = subtitle_ids.length

    // After this button is clicked: Download all subtitles for this course (get multiple files)
    var button_text = `Download all subtitles (${subtitle_count} 个 .srt file)`;
    button.textContent = button_text;
    button.addEventListener('click', download_subtitles);

    // After this button is clicked: download a subtitle of the current video (get a file)
    button2.textContent = get_download_current_episode_button_text()
    button2.addEventListener('click', download_current_episode_subtitles);

    // After this button is clicked: Download the current video
    button3.textContent = get_download_current_video_button_text()
    button3.addEventListener('click', download_current_episode_video);

    var button_css = `
      font-size: 16px;
      font-family: Lalezar;
      padding: 4px 18px;
      color: lightgreen;
      background-color: #04567b;
      border: none;
      border-left: 2px solid;
      border-right: 2px solid;
    `;

    var button2_css = `
      font-size: 16px;
      font-family: Lalezar;
      padding: 4px 18px;
      margin-left: 10px;
      color: lightgreen;
      background-color: #04567b;
      border: none;
      border-left: 2px solid;
      border-right: 2px solid;
    `;

    var div_css = `
      font-family: Lalezar;
      margin-bottom: 10px;
      color: lightgreen;
    `;

    button.setAttribute('style', button_css);
    button2.setAttribute('style', button2_css);
    button3.setAttribute('style', button2_css);
    div.setAttribute('style', div_css);

    div.appendChild(button);
    div.appendChild(button2);
    div.appendChild(button3);

    // button 4
    button4.textContent = "Download all videos"
    button4.addEventListener('click', download_all_video);
    button4.setAttribute('style', button2_css);
    div.appendChild(button4);

    insertAfter(div, title_element);
  }

  // Download the current episode
  function download_current_episode_video() {
    var vjs = videojs(document.querySelector('video'))
    var video_link = find_video_link(vjs.mediainfo.sources)
    if (video_link != null) {
      var filename = `${get_filename()}.mp4`
      fetch(video_link)
        .then(res => res.blob())
        .then(blob => {
          downloadString(blob, 'video/mp4', filename);
        });
    }
  }

  // Download single video
  function download_video(video_link, filetype, filename) {
    return new Promise((resolve, reject) => {
      fetch(video_link)
        .then(res => res.blob())
        .then(blob => {
          downloadString(blob, filetype, filename);
          resolve(true);
        }).catch(err => reject(err));
    })
  }

  // Input: Array of resources, returned from network requests
    // Output: (string) video link
  function find_video_link(sources) {
    var video_link = null;

    // Find the link to *.mp4 in the array
    var array = sources;
    for (var i = 0; i < array.length; i++) {
      var s = array[i];
      if (s.container && s.container == 'MP4' && s.height >= 720) {
        video_link = s.src;
        break;
      }
    }

    return video_link
  }

  // To get an array of objects in a specific format, iterate over the token
  function get_current_episode_content_array() {
    var vjs = videojs(document.querySelector('video'))
    var cues = vjs.textTracks()[0].cues
    var array = []
    for (var i = 0; i < cues.length; i++) {
      var cue = cues[i]
      var obj = {
        start: cue.startTime,
        end: cue.endTime,
        text: cue.text,
      }
      array.push(obj);
    }
    return array;
  }

  // Download the subtitle of the current episode
  async function download_current_episode_subtitles() {
    var array = get_current_episode_content_array()
    var srt = parse_content_array_to_SRT(array);
    var filename = `${get_filename()}.srt`
    downloadString(srt, "text/plain", filename);
  }

  // CSRF
  function csrf() {
    return SS.serverBootstrap.parentClassData.formData.csrfTokenValue
  }

// Get the URL of the current course (no parameters or sections, no projects / or / transcript at the end of the URL)
  function course_url() {
    var url1 = SS.serverBootstrap.loginPopupRedirectTo
    var url2 = window.location.origin + window.location.pathname
    if (url1) {
      return url1
    } else {
      return url2
    }
    // return document.querySelector('meta[property="og:url"]').content // this is not reliable
    // for example:
    // https://www.skillshare.com/classes/Logo-Design-Mastery-The-Full-Course/1793713747
  }

  // return一个 URL
  function json_url() {
    return `${course_url()}/transcripts?format=json`
    // https://www.skillshare.com/classes/Logo-Design-Mastery-The-Full-Course/1793713747/transcripts?format=json
  }

// Send the http request and get the transcriptCuesArray
    // Call example: var result = await get_transcriptCuesArray();
  async function get_transcriptCuesArray() {
    return new Promise(function (resolve, reject) {
      var url = json_url()
      fetch(url, {
          headers: {
            'x-csrftoken': csrf(),
            'accept': 'application/json, text/javascript, */*; q=0.01'
          }
        })
        .then(response => response.json())
        .then(data => {
          resolve(data.transcriptCuesArray)
        }).catch(e => {
          reject(e);
        })
    })
  }

   // input: id
   // output: an object in the sessions array
  function id_to_obj(id) {
    var array = sessions
    for (var i = 0; i < array.length; i++) {
      var one = array[i];
      if (one.id == id) {
        return one
      }
    }
    return null
  }

   // input: video_id
   // output: the record in the session
  function video_id_to_obj(video_id) {
    var string = `bc:${video_id}` // videoId: "bc:6053324155001"
    var array = sessions
    for (var i = 0; i < array.length; i++) {
      var one = array[i];
      if (one.videoId == string) {
        return one
      }
    }
    return null
  }

   // input: video_id
   // output: appropriate video file name (but no suffix, add the suffix yourself)
  function get_filename_by_video_id(video_id) {
    var obj = video_id_to_obj(video_id)
    var rank = obj.displayRank
    var filename = `${rank}. ${safe_filename(obj.title)}`
    return filename
  }

   // input: id
   // output: filename (xxx.srt)
  function get_filename_by_id(id) {
    var obj = id_to_obj(id);
    var rank = obj.displayRank;
    var title = obj.title
    var filename = `${rank}. ${safe_filename(title)}.srt`
    return filename
  }

  // Download subtitles of all episodes
  async function download_subtitles() {
    for (let key in transcriptCuesArray) {
      var value = transcriptCuesArray[key];
      var srt = parse_content_array_to_SRT(value.content);
      var filename = get_filename_by_id(key)
      downloadString(srt, "text/plain", filename);

      await sleep(1000);
       // If you don't sleep, downloading about 11 files will stop (no error, but it will stop)
       // sleep can download all 42 files
    }
  }

  // Download from current video
  async function download_all_video() {
    // current session
    var startingSession = unsafeWindow.SS.serverBootstrap.pageData.videoPlayerData.startingSession

    // all session
    var sessions = unsafeWindow.SS.serverBootstrap.pageData.videoPlayerData.units[0].sessions

    for (var i = 0; i < sessions.length; i++) {
      var session = sessions[i];
      var displayRank = session.displayRank;
      if (displayRank >= startingSession.displayRank) { // Download from the current video (including the current video) to the end一个
        var video_id = session.videoId.split(':')[1]; // video ID
        var response = await get_single_video_data(video_id); // get JSON return

        var video_link = find_video_link(response.sources); // video link
        var filename = `${get_filename_by_video_id(response.id)}.mp4`; // file name

        if (video_link.startsWith('http://')) {
          video_link = video_link.replace('http://', 'https://')
        }

        // console.log(video_link);
        // console.log(filename);
        // console.log(response);
        // console.log('--------------');
        await download_video(video_link, 'video/mp4', filename); // download
      }
    }
  }

  // return account ID
   // Example: 3695997568001
  function get_account_id() {
    return unsafeWindow.SS.serverBootstrap.pageData.videoPlayerData.brightcoveAccountId;
  }

  // input: id
   // output: JSON (video data)
  function get_single_video_data(video_id) {
    // https://edge.api.brightcove.com/playback/v1/accounts/3695997568001/videos/6234379709001
    var account_id = get_account_id();
    var url = `https://edge.api.brightcove.com/playback/v1/accounts/${account_id}/videos/${video_id}`
    return new Promise(function (resolve, reject) {
      fetch(url, {
          headers: {
            "Accept": request_header_accept
          }
        })
        .then(response => response.json())
        .then(data => {
          resolve(data)
        }).catch(e => {
          reject(e);
        })
    })
  }

  // put an array in the specified format
   // convert to SRT
   // return string
  // var content_array_example = [
  //   {
  //     start: 0,
  //     end: 8.3,
  //     text: "hi"
  //   },
  //   // ...
  // ];
  function parse_content_array_to_SRT(content_array) {
    if (content_array === '') {
      return false;
    }

    var result = '';
    var BOM = '\uFEFF';
    result = BOM + result; // store final SRT result

    for (var i = 0; i < content_array.length; i++) {
      var one = content_array[i];
      var index = i + 1;
      var content = one.text
      var start = one.start
      var end = one.end

      // we want SRT format:
      /*
          1
          00:00:11,939 --> 00:00:14,350
          hello every one
          2
          00:00:04,350 --> 00:00:06,720
          hi guys
      */
      var new_line = "\n";
      result = result + index + new_line;
      // 1

      var start_time = process_time(parseFloat(start));
      var end_time = process_time(parseFloat(end));
      result = result + start_time;
      result = result + ' --> ';
      result = result + end_time + new_line;
      // 00:00:11,939 --> 00:00:14,350

      result = result + content + new_line + new_line;
    }
    return result;
  }


  // Processing time. For example start="671.33" start="37.64" start="12" start="23.029"
   // Process into srt time, such as 00:00:00,090 00:00:08,460 00:10:29,350
  function process_time(s) {
    s = s.toFixed(3);
      // Excellent performance, both integers and decimals are converted to 3 decimal places
      // 671.33 -> 671.330
      // 671 -> 671.000
      // Note that the function will be rounded

    var array = s.split('.');
     // Split the start time by periods
     // 671.330 will be split into arrays: [671, 330]

    var Hour = 0;
    var Minute = 0;
    var Second = array[0]; // 671
    var MilliSecond = array[1]; // 330
    // Declare the variables first, and then we will spell them all together

    // Let's deal with seconds. Divide "minutes" and "hours"
    if (Second >= 60) {
      Minute = Math.floor(Second / 60);
      Second = Second - Minute * 60;
      // Split seconds into minutes and seconds, such as 121 seconds, split into 2 minutes and 1 second

      Hour = Math.floor(Minute / 60);
      Minute = Minute - Hour * 60;
      // Split minutes into hours and minutes, such as 700 minutes, into 11 hours and 40 minutes
    }
    // Minutes, if the number of digits is less than two, it becomes two, and the following two if statements have the same effect.
    if (Minute < 10) {
      Minute = '0' + Minute;
    }
    // Hour
    if (Hour < 10) {
      Hour = '0' + Hour;
    }
    // second
    if (Second < 10) {
      Second = '0' + Second;
    }
    return Hour + ':' + Minute + ':' + Second + ',' + MilliSecond;
  }

  function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  // copy from: https://gist.github.com/danallison/3ec9d5314788b337b682
  // Example downloadString(srt, "text/plain", filename);
  function downloadString(text, fileType, fileName) {
    var blob = new Blob([text], {
      type: fileType
    });
    var a = document.createElement('a');
    a.download = fileName;
    a.href = URL.createObjectURL(blob);
    a.dataset.downloadurl = [fileType, a.download, a.href].join(':');
    a.style.display = "none";
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    setTimeout(function () {
      URL.revokeObjectURL(a.href);
    }, 11500);
  }

  // Changing the video triggers this event
    // The actual measurement appears to trigger this event elsewhere,
  document.addEventListener("selectionchange", function () {
    button2.textContent = get_download_current_episode_button_text()
  })

  function get_download_current_episode_button_text() {
    return `Download the current subtitle (.srt)`
    // return `Download current subtitles (${get_filename()}.srt)`
  }

  function get_download_current_video_button_text() {
    return `Download the current video (.mp4)`
  }

  // Returns the title of the currently playing video
  function get_current_title() {
    var li = document.querySelector('li.session-item.active')
    var title = li.querySelector('.session-item-title')
    return title.innerText;
  }

  // Convert to safe filename
  function safe_filename(string) {
    return string.replace(':', '-')
  }

  // The filename for the current video
  function get_filename() {
    return safe_filename(get_current_title())
  }

  // Program input
  function main() {
    // Run if there is a title
    title_element = document.querySelector("div.class-details-header-title");
    if (title_element) {
      inject_our_script();
      sessions = unsafeWindow.SS.serverBootstrap.pageData.unitsData.units[0].sessions
    }
  }

  setTimeout(main, 2000);
})();